{
  "hash": "8ac9eb3f432c2861909d433c4afe064f",
  "result": {
    "markdown": "# PCA Cluster pairwise comparisons\n\n## Overview\n\nPairwise comparisons with the validation data for the clusterings produced with PCA model version.\nWe have 140 validation points\n\n\n::: {.cell}\n\n:::\n\n\n## Validation points per cluster\n\nHere I am illustrating how many independent validation points we have for each cluster assignment, for the different model options from k = 6, 8, 11.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nNote that clusters with only 1 member won't be included in pairwise comparison b/c not possible to calculate variance..\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](25-pca-cluster-pairwise-comp_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Soil properties for pairwise comparisons\n\nBecause our validation data points are coming from different projects / datasets, we don't have exactly the same variables from each one.\nThis is a reminder of which variables exist in the three sources we used for validation points:\n\n-   KSSL : clay, bulk density, lep, awc, ec, cec, pH, carbonates, organic matter, (est org C)\n-   CIG: clay, bulk density, pH, carbonates, organic matter, (est org C)\n-   SHI: clay, bulk density, pH, organic matter\n\nIn summary: all three datasets include bulk density, pH, organic matter, and clay, and KSSL and CIG include carbonates.\nSo I think it makes sense to focus on plotting and doing pairwise comparisons with these variables specifically\n\n## Example pairwise: OM, k=6\n\nWorking out the steps I need to include in a function to do the pairwise comparisons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# test case k=6 version and organic matter\n\ntest_dat <- val_dat %>% \n  select(val_unit_id, k_6, om_loi, claytotal, source) %>% \n  drop_na(om_loi)\n\n# note only 1 observation for clust_1, need to drop it\n# b/c can't calculate variance for the pairwise comparison w/ only 1 obx.\ntest_dat %>% count(k_6)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"k_6\"],\"name\":[1],\"type\":[\"glue\"],\"align\":[\"right\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"clust_1\",\"2\":\"1\"},{\"1\":\"clust_2\",\"2\":\"28\"},{\"1\":\"clust_3\",\"2\":\"52\"},{\"1\":\"clust_4\",\"2\":\"26\"},{\"1\":\"clust_5\",\"2\":\"16\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ntest_dat_mult <- test_dat %>% filter(k_6 != \"clust_1\")\n\n# plot to see distributions \ntest_dat_mult %>% \n  ggplot(aes(x = k_6, y = om_loi)) + \n  geom_boxplot() + \n  geom_point() + \n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](25-pca-cluster-pairwise-comp_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntest_lm <- lm(formula = om_loi ~ k_6,\n   data = test_dat_mult)\n\n# look at some diagnostic plots for our model \n# note homogeneity of variance looks sketchy\nperformance::check_model(test_lm, check = c(\"normality\", \"homogeneity\", \"linearity\"))\n```\n\n::: {.cell-output-display}\n![](25-pca-cluster-pairwise-comp_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n\n```{.r .cell-code}\nperformance::check_homogeneity(test_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWarning: Variances differ between groups (Bartlett Test, p = 0.000).\n```\n:::\n:::\n\n\nThis shows how I would do pairwise t-tests with unpooled variance.\nThis might be more appropriate than the ANOVA approach I originally tried, because the diagnostic plots above suggest that we don't have homogeneity of variance for our validation dataset.\n\n*\"For some examples, one can use both the pooled t-procedure and the separate variances (non-pooled) t-procedure and obtain results that are close to each other. However, when the sample standard deviations are very different from each other, and the sample sizes are different, the separate variances 2-sample t-procedure is more reliable.\" Penn State [STAT 800 \"Applied Research Methods\"](https://online.stat.psu.edu/stat800/lesson/5/5.6/5.6.1/5.6.1.2) 5.6.1.2*\n\nNote that the p-value adjustment method here is \"holm\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# view the standard (console) output\nwith(test_dat_mult, pairwise.t.test(om_loi, k_6, pool.sd = FALSE)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPairwise comparisons using t tests with non-pooled SD \n\ndata:  om_loi and k_6 \n\n        clust_2 clust_3 clust_4\nclust_3 0.011   -       -      \nclust_4 0.412   0.953   -      \nclust_5 0.164   0.862   0.953  \n\nP value adjustment method: holm \n```\n:::\n\n```{.r .cell-code}\ntest_obj <- with(test_dat_mult, pairwise.t.test(om_loi, k_6, pool.sd = FALSE)) \n\nclass(test_obj)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pairwise.htest\"\n```\n:::\n\n```{.r .cell-code}\nbiostat::make_cld(test_obj)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"group\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"cld\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"spaced_cld\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"clust_2\",\"2\":\"a\",\"3\":\"a_\",\"_rn_\":\"1\"},{\"1\":\"clust_3\",\"2\":\"b\",\"3\":\"_b\",\"_rn_\":\"2\"},{\"1\":\"clust_4\",\"2\":\"ab\",\"3\":\"ab\",\"_rn_\":\"3\"},{\"1\":\"clust_5\",\"2\":\"ab\",\"3\":\"ab\",\"_rn_\":\"4\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# tidy output, filter to significant comparisons only\nwith(test_dat_mult, pairwise.t.test(om_loi, k_6, pool.sd = FALSE)) %>% broom::tidy() %>% \n  filter(p.value < 0.05)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"group1\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"group2\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"p.value\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"clust_3\",\"2\":\"clust_2\",\"3\":\"0.01129895\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## Function for pairwise comparisons\n\nArguments: soil property and k option (model version / number of clusters) and validation dataframe.\n\nReturns: all pairwise comparisons in a dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_clust_pairwise <- function(soil_var, k_opt, df) {\n  \n  dat_no_na <- df %>%\n    select(val_unit_id,\n           all_of(k_opt),\n           all_of(soil_var)) %>%\n    drop_na(all_of(soil_var))\n  \n  # can't do pairwise t-tests with only 1 obs in a \n  # group, so need to filter those out \n  \n  n_obs_per_cluster <- dat_no_na %>%\n    count(.data[[k_opt]])\n  \n  single_obs_clusters <- n_obs_per_cluster %>% \n    filter(n == 1) %>% \n    pull(.data[[k_opt]])\n  \n  if(length(single_obs_clusters) == 0){\n    \n    dat_subset <- dat_no_na\n    \n  }else{\n    \n    dat_subset <- dat_no_na %>% \n      filter(!(.data[[k_opt]] %in% single_obs_clusters))\n    \n  } \n  \n  soil_var_vec <- dat_subset %>% pull(soil_var)\n  clust_vec <- dat_subset %>% pull(k_opt)\n\n  pairs_obj <- pairwise.t.test(soil_var_vec,\n                              clust_vec,\n                              pool.sd = FALSE)\n  \n  tidy_pairs_df <- pairs_obj %>%\n    broom::tidy()\n  \n  cld_df <- biostat::make_cld(pairs_obj)\n  \n  results_list <- list(pairs_df = tidy_pairs_df,\n                       cld = cld_df)\n\n  return(results_list)\n  \n}\n```\n:::\n\n\n## Example function output\n\nThis is what the pairwise function I wrote above returns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompare_clust_pairwise(soil_var = \"ph1to1h2o\",\n                       k_opt = \"k_8\",\n                       df = val_dat) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$pairs_df\n# A tibble: 21 × 3\n   group1  group2   p.value\n   <chr>   <chr>      <dbl>\n 1 clust_2 clust_1 1   e+ 0\n 2 clust_3 clust_1 1   e+ 0\n 3 clust_3 clust_2 1   e+ 0\n 4 clust_4 clust_1 1.66e- 1\n 5 clust_4 clust_2 2.39e-13\n 6 clust_4 clust_3 1.10e- 3\n 7 clust_5 clust_1 7.83e- 1\n 8 clust_5 clust_2 4.96e- 4\n 9 clust_5 clust_3 7.43e- 2\n10 clust_5 clust_4 2.43e- 3\n# … with 11 more rows\n\n$cld\n    group  cld spaced_cld\n1 clust_1 abcd       abcd\n2 clust_2    a       a___\n3 clust_3   ab       ab__\n4 clust_4    c       __c_\n5 clust_5   bd       _b_d\n6 clust_6    c       __c_\n7 clust_7    d       ___d\n```\n:::\n:::\n\n\n## Run pairwise comparisons\n\nHere I create a dataframe to hold the results of the pairwise comparisons, then use `map2()` to iterate over the variables and cluster sizes, running all the tests.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# vars to compare on \nvar_names <- c(\"claytotal\", \"ph1to1h2o\", \"om_loi\", \"caco3\", \"dbthirdbar\")\n\n# all possible values of k (number of clusters)\ncluster_opts <- glue(\"k_{c(4, 5, 6, 7, 8, 9, 10, 11)}\")\n\n# create df with all combinations of var_names x clusters\ncomp_template <- tidyr::crossing(var_names, cluster_opts)\n\n# run the pairwise comparisons for each var and cluster size\ndiffs_df <- comp_template %>%\n  mutate(comps_all = map2(.x = var_names,\n                          .y = cluster_opts,\n                          .f = compare_clust_pairwise,\n                          df = val_dat))\n\n# unnest once to get the pairs_df and cld_df dfs \n# as their own columns\ndiffs_unnest <- diffs_df %>% \n  unnest(comps_all) %>% \n  mutate(obj_names = names(comps_all))\n\n# want to save pairs_df and cld_df dat separately, so filtering\n# and then unnesting again to get rectangular data \npairs_dat <- diffs_unnest %>% \n  filter(obj_names == \"pairs_df\") %>% \n  unnest(comps_all) %>% \n  select(-obj_names)\n\nwrite_csv(pairs_dat, \"data/pca_pairwise_results_all.csv\")\n\ncld_dat <- diffs_unnest %>% \n  filter(obj_names == \"cld\") %>% \n  unnest(comps_all) %>% \n  select(-obj_names)\n\nwrite_csv(cld_dat, \"data/cld_display.csv\")\n```\n:::\n\n\nNow need to count how many of the tests have an adjusted p-value \\< 0.05.\nAll of the p-values are adjusted with the Holm method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_sig_comps <- function(df){\n  \n  df %>% \n    filter(p.value<0.05) %>% \n    nrow()\n  \n}\n\nsig_diffs_df <- pairs_dat %>%\n  group_by(cluster_opts, var_names) %>%\n  nest(data = c(group1, group2, p.value)) %>%\n  mutate(n_sig_comps = map_int(data, count_sig_comps)) %>%\n  mutate(\n    num_regions = as.numeric(str_extract(cluster_opts, \"[:digit:]+\")),\n    possible_comps = (num_regions * (num_regions - 1)) / 2,\n    alpha_comps = round(possible_comps * 0.05, digits = 0)\n  ) %>%\n  select(var_names,\n         cluster_opts,\n         num_regions,\n         data,\n         n_sig_comps,\n         possible_comps,\n         alpha_comps)\n\nsig_diffs_summary <- sig_diffs_df %>% \n  select(var_names,\n         cluster_opts,\n         num_regions,\n         n_sig_comps,\n         possible_comps,\n         alpha_comps)\n\nwrite_csv(sig_diffs_summary, \"data/pca_pairwise_comparisons_summary.csv\")\n```\n:::\n\n\n## Plot comparisons\n\n### All clusters\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](25-pca-cluster-pairwise-comp_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nFor context, this plot shows a black line for the total number of **possible** contrasts.\nNote that because we are showing each soil property variable separately, the \"total possible\" line illustrates the total number of possible comparisons for a single variable\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](25-pca-cluster-pairwise-comp_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nTwo other ways to contextualize the number of significant contrasts: 1) with a table, and 2) with a plot showing how the % significant contrasts (as a function of total possible) changes as the number of clusters goes up.\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"num_regions\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"n_sig_comps\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"possible_comps\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"percent_sig\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"alpha_5perc\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"4\",\"2\":\"20\",\"3\":\"30\",\"4\":\"67\",\"5\":\"2\"},{\"1\":\"5\",\"2\":\"23\",\"3\":\"50\",\"4\":\"46\",\"5\":\"2\"},{\"1\":\"6\",\"2\":\"22\",\"3\":\"75\",\"4\":\"29\",\"5\":\"4\"},{\"1\":\"7\",\"2\":\"34\",\"3\":\"105\",\"4\":\"32\",\"5\":\"5\"},{\"1\":\"8\",\"2\":\"41\",\"3\":\"140\",\"4\":\"29\",\"5\":\"7\"},{\"1\":\"9\",\"2\":\"43\",\"3\":\"180\",\"4\":\"24\",\"5\":\"9\"},{\"1\":\"10\",\"2\":\"53\",\"3\":\"225\",\"4\":\"24\",\"5\":\"11\"},{\"1\":\"11\",\"2\":\"53\",\"3\":\"275\",\"4\":\"19\",\"5\":\"14\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n::: {.cell-output-display}\n![](25-pca-cluster-pairwise-comp_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](25-pca-cluster-pairwise-comp_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "25-pca-cluster-pairwise-comp_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}