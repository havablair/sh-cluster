{
  "hash": "853c2fb4674c88ea022a1212ac2d9c8d",
  "result": {
    "markdown": "# Explore Map Units & Components in AOI\n\n\n\n\n\n\n\n## Overview\n\nI have a list of map unit keys from my clipped area of interest.\nIn order to reduce the file size of the TIF I was working with, I created new map unit key IDs.\nThe cross-walk table is in `data/gSSURGO_MN/mukey_new_crosswalk.txt`.\nThere are 7,862 unique map unit keys in my area of interest (AOI).\n\nThis is what the cross-walk table looks like:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   MUKEY MUKEY_New  Count\n1 352143         0   2685\n2 352159         1   4425\n3 352160         2   7057\n4 352162         3 595744\n5 352165         4  83467\n6 352166         5    110\n```\n:::\n:::\n\n\n\n## Map Units\n\nI can use the map unit keys (MUKEYs) from my AOI to get more information on my target map units by calling up different tables from gSSURGO and subsetting based on the MUKEYs, and identifying the components within each mapunit in my AOI.\n\nFor more info about SSURGO tables and columns, refer to descriptions in the SSURGO metadata PDFs in `data/gSSURGO_MN/`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# which layers (tables) are available to me?\n# can inspect layers in .gdb\nsf::st_layers(\"./data/gSSURGO_MN/gSSURGO_MN.gdb\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDriver: OpenFileGDB \nAvailable layers:\n           layer_name     geometry_type features fields\n1            chaashto                NA   223330      4\n2       chconsistence                NA     2794     10\n3       chdesgnsuffix                NA    62846      3\n4             chfrags                NA   321265     12\n5            chorizon                NA   130493    171\n6             chpores                NA       16      9\n7            chstruct                NA   110021      7\n8         chstructgrp                NA    95901      4\n9              chtext                NA        0      7\n10          chtexture                NA   318704      4\n11       chtexturegrp                NA   313739      6\n12       chtexturemod                NA    50000      3\n13          chunified                NA   240027      4\n14      cocanopycover                NA       50      6\n15          cocropyld                NA    34146     12\n16     codiagfeatures                NA    31760     12\n17         coecoclass                NA    52483      6\n18          coeplants                NA    25544      7\n19       coerosionacc                NA     5743      4\n20          coforprod                NA     2726     12\n21         coforprodo                NA        0     10\n22       cogeomordesc                NA    83667      8\n23   cohydriccriteria                NA    25091      3\n24           cointerp                NA  5698886     13\n25            comonth                NA   421728     17\n26          component                NA    42529    109\n27               copm                NA    49990      7\n28            copmgrp                NA    34883      4\n29       copwindbreak                NA   161238      8\n30     corestrictions                NA     4369     13\n31        cosoilmoist                NA   666791      9\n32         cosoiltemp                NA       96      9\n33        cosurffrags                NA    10955     15\n34      cosurfmorphgc                NA    17984      6\n35     cosurfmorphhpp                NA    28248      3\n36      cosurfmorphmr                NA      460      3\n37      cosurfmorphss                NA    42228      4\n38         cotaxfmmin                NA    33654      3\n39       cotaxmoistcl                NA    20332      3\n40             cotext                NA    42529      7\n41       cotreestomng                NA    32192      5\n42        cotxfmother                NA    31091      3\n43       distinterpmd                NA    11868      8\n44       distlegendmd                NA       92     11\n45             distmd                NA       92      4\n46           featdesc                NA      801      6\n47          laoverlap                NA      512      6\n48             legend                NA       92     14\n49         legendtext                NA        0      7\n50            mapunit                NA    10688     24\n51              month                NA       12      2\n52           muaggatt                NA    10688     40\n53         muaoverlap                NA    35224      4\n54          mucropyld                NA    23355     10\n55             mutext                NA    12230      7\n56          sacatalog                NA       92     11\n57           sainterp                NA    11868      9\n58       sdvalgorithm                NA        8      4\n59       sdvattribute                NA      211     53\n60          sdvfolder                NA       20      6\n61 sdvfolderattribute                NA      213      2\n62       mdstatdomdet                NA     6930      5\n63       mdstatdommas                NA      123      2\n64       mdstatidxdet                NA      172      4\n65       mdstatidxmas                NA      149      3\n66     mdstatrshipdet                NA       66      5\n67     mdstatrshipmas                NA       63      5\n68      mdstattabcols                NA      865     14\n69         mdstattabs                NA       75      5\n70           FEATLINE Multi Line String    60902      5\n71          FEATPOINT             Point   254435      4\n72             MULINE Multi Line String        0      5\n73            MUPOINT             Point        0      4\n74          SAPOLYGON     Multi Polygon       96      5\n75          MUPOLYGON     Multi Polygon  2123552      6\n76              Valu1                NA    10688     58\n```\n:::\n\n```{.r .cell-code}\nmn_gdb <- \"data/gSSURGO_MN/gSSURGO_MN.gdb\" \n\n# read only mapunit table, as dataframe\nmn_mapunits <- sf::st_read(dsn = mn_gdb, layer = \"mapunit\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `mapunit' from data source \n  `C:\\Users\\Hava\\Documents\\R\\ch03-sh-cluster\\data\\gSSURGO_MN\\gSSURGO_MN.gdb' \n  using driver `OpenFileGDB'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: no simple feature geometries present: returning a data.frame or tbl_df\n```\n:::\n:::\n\n\n\nThese are the columns in the mapunit table:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(mn_mapunits)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"musym\"         \"muname\"        \"mukind\"        \"mustatus\"     \n [5] \"muacres\"       \"mapunitlfw_l\"  \"mapunitlfw_r\"  \"mapunitlfw_h\" \n [9] \"mapunitpfa_l\"  \"mapunitpfa_r\"  \"mapunitpfa_h\"  \"farmlndcl\"    \n[13] \"muhelcl\"       \"muwathelcl\"    \"muwndhelcl\"    \"interpfocus\"  \n[17] \"invesintens\"   \"iacornsr\"      \"nhiforsoigrp\"  \"nhspiagr\"     \n[21] \"vtsepticsyscl\" \"mucertstat\"    \"lkey\"          \"mukey\"        \n```\n:::\n:::\n\n\n\nWe will subset to only include MUKEYs in our AOI.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# keep only the map units in my AOI (n=7862)\ntarget_mapunits <- mn_mapunits %>% \n  filter(mukey %in% aoi_mu$MUKEY)\n\n# summary of map unit types\ntarget_mapunits %>% \n  dplyr::group_by(mukind) %>% \n  dplyr::summarise(n = n()) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 2\n  mukind                     n\n  <chr>                  <int>\n1 Complex                 2013\n2 Consociation            5577\n3 Undifferentiated group   268\n4 <NA>                       4\n```\n:::\n\n```{.r .cell-code}\n# when is mukind undefined?\ntarget_mapunits %>% \n  filter(is.na(mukind))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  musym               muname mukind mustatus muacres mapunitlfw_l mapunitlfw_r\n1     W                Water   <NA>     <NA>    2280           NA           NA\n2  1356 Water, miscellaneous   <NA>     <NA>     227           NA           NA\n3     W                Water   <NA>     <NA>    8769           NA           NA\n4     W                Water   <NA>     <NA>    1137           NA           NA\n  mapunitlfw_h mapunitpfa_l mapunitpfa_r mapunitpfa_h          farmlndcl\n1           NA           NA           NA           NA Not prime farmland\n2           NA           NA           NA           NA Not prime farmland\n3           NA           NA           NA           NA Not prime farmland\n4           NA           NA           NA           NA Not prime farmland\n  muhelcl muwathelcl muwndhelcl interpfocus invesintens iacornsr nhiforsoigrp\n1    <NA>       <NA>       <NA>        <NA>        <NA>       NA         <NA>\n2    <NA>       <NA>       <NA>        <NA>        <NA>       NA         <NA>\n3    <NA>       <NA>       <NA>        <NA>        <NA>       NA         <NA>\n4    <NA>       <NA>       <NA>        <NA>        <NA>       NA         <NA>\n  nhspiagr vtsepticsyscl mucertstat  lkey  mukey\n1       NA          <NA>       <NA> 13809 394925\n2       NA          <NA>       <NA> 13809 394939\n3       NA          <NA>       <NA> 13811 427939\n4       NA          <NA>       <NA> 13816 428207\n```\n:::\n\n```{.r .cell-code}\n# what's going on with W = water?\nwater_mukeys <- target_mapunits %>% \n  filter(musym == \"W\") %>% \n  pull(mukey)\n\ntarget_mapunits %>% \n  filter(mukey %in% water_mukeys) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  musym muname       mukind mustatus muacres mapunitlfw_l mapunitlfw_r\n1     W  Water         <NA>     <NA>    2280           NA           NA\n2     W  Water Consociation     <NA>       2           NA           NA\n3     W  Water Consociation     <NA>  353391           NA           NA\n4     W  Water Consociation     <NA>   15720           NA           NA\n5     W  Water Consociation     <NA>      27           NA           NA\n6     W  Water Consociation     <NA>   20449           NA           NA\n  mapunitlfw_h mapunitpfa_l mapunitpfa_r mapunitpfa_h          farmlndcl\n1           NA           NA           NA           NA Not prime farmland\n2           NA           NA           NA           NA Not prime farmland\n3           NA           NA           NA           NA Not prime farmland\n4           NA           NA           NA           NA Not prime farmland\n5           NA           NA           NA           NA Not prime farmland\n6           NA           NA           NA           NA Not prime farmland\n  muhelcl muwathelcl muwndhelcl interpfocus invesintens iacornsr nhiforsoigrp\n1    <NA>       <NA>       <NA>        <NA>        <NA>       NA         <NA>\n2    <NA>       <NA>       <NA>        <NA>        <NA>       NA         <NA>\n3    <NA>       <NA>       <NA>        <NA>        <NA>       NA         <NA>\n4    <NA>       <NA>       <NA>        <NA>        <NA>       NA         <NA>\n5    <NA>       <NA>       <NA>        <NA>        <NA>       NA         <NA>\n6    <NA>       <NA>       <NA>        <NA>        <NA>       NA         <NA>\n  nhspiagr vtsepticsyscl mucertstat  lkey  mukey\n1       NA          <NA>       <NA> 13809 394925\n2       NA          <NA>       <NA> 12953 357194\n3       NA          <NA>       <NA> 13748 397687\n4       NA          <NA>       <NA> 12956 352341\n5       NA          <NA>       <NA> 15777 654761\n6       NA          <NA>       <NA> 13758 430612\n```\n:::\n\n```{.r .cell-code}\n# saving CSV of target map unit info\nwrite_csv(target_mapunits, \"data/target_mapunit_table.csv\") \n```\n:::\n\n\n\n## Components\n\nFirst a reminder of the columns in the component table:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmn_components <- sf::st_read(dsn = mn_gdb, layer = \"component\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `component' from data source \n  `C:\\Users\\Hava\\Documents\\R\\ch03-sh-cluster\\data\\gSSURGO_MN\\gSSURGO_MN.gdb' \n  using driver `OpenFileGDB'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: no simple feature geometries present: returning a data.frame or tbl_df\n```\n:::\n\n```{.r .cell-code}\ncolnames(mn_components)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"comppct_l\"        \"comppct_r\"        \"comppct_h\"       \n  [4] \"compname\"         \"compkind\"         \"majcompflag\"     \n  [7] \"otherph\"          \"localphase\"       \"slope_l\"         \n [10] \"slope_r\"          \"slope_h\"          \"slopelenusle_l\"  \n [13] \"slopelenusle_r\"   \"slopelenusle_h\"   \"runoff\"          \n [16] \"tfact\"            \"wei\"              \"weg\"             \n [19] \"erocl\"            \"earthcovkind1\"    \"earthcovkind2\"   \n [22] \"hydricon\"         \"hydricrating\"     \"drainagecl\"      \n [25] \"elev_l\"           \"elev_r\"           \"elev_h\"          \n [28] \"aspectccwise\"     \"aspectrep\"        \"aspectcwise\"     \n [31] \"geomdesc\"         \"albedodry_l\"      \"albedodry_r\"     \n [34] \"albedodry_h\"      \"airtempa_l\"       \"airtempa_r\"      \n [37] \"airtempa_h\"       \"map_l\"            \"map_r\"           \n [40] \"map_h\"            \"reannualprecip_l\" \"reannualprecip_r\"\n [43] \"reannualprecip_h\" \"ffd_l\"            \"ffd_r\"           \n [46] \"ffd_h\"            \"nirrcapcl\"        \"nirrcapscl\"      \n [49] \"nirrcapunit\"      \"irrcapcl\"         \"irrcapscl\"       \n [52] \"irrcapunit\"       \"cropprodindex\"    \"constreeshrubgrp\"\n [55] \"wndbrksuitgrp\"    \"rsprod_l\"         \"rsprod_r\"        \n [58] \"rsprod_h\"         \"foragesuitgrpid\"  \"wlgrain\"         \n [61] \"wlgrass\"          \"wlherbaceous\"     \"wlshrub\"         \n [64] \"wlconiferous\"     \"wlhardwood\"       \"wlwetplant\"      \n [67] \"wlshallowwat\"     \"wlrangeland\"      \"wlopenland\"      \n [70] \"wlwoodland\"       \"wlwetland\"        \"soilslippot\"     \n [73] \"frostact\"         \"initsub_l\"        \"initsub_r\"       \n [76] \"initsub_h\"        \"totalsub_l\"       \"totalsub_r\"      \n [79] \"totalsub_h\"       \"hydgrp\"           \"corcon\"          \n [82] \"corsteel\"         \"taxclname\"        \"taxorder\"        \n [85] \"taxsuborder\"      \"taxgrtgroup\"      \"taxsubgrp\"       \n [88] \"taxpartsize\"      \"taxpartsizemod\"   \"taxceactcl\"      \n [91] \"taxreaction\"      \"taxtempcl\"        \"taxmoistscl\"     \n [94] \"taxtempregime\"    \"soiltaxedition\"   \"castorieindex\"   \n [97] \"flecolcomnum\"     \"flhe\"             \"flphe\"           \n[100] \"flsoilleachpot\"   \"flsoirunoffpot\"   \"fltemik2use\"     \n[103] \"fltriumph2use\"    \"indraingrp\"       \"innitrateleachi\" \n[106] \"misoimgmtgrp\"     \"vasoimgtgrp\"      \"mukey\"           \n[109] \"cokey\"           \n```\n:::\n:::\n\n\n\nSummarizing some info about number of components, major components\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# keep the components in my target map units\ntarget_comp <- mn_components %>% \n  filter(mukey %in% target_mapunits$mukey) \n\n# looking at this, it's probabaly safe to exclude \n# compname == \"Water\" when the comppct_r is also 100%\n# there's one here where water is only 5%, \"Riverwash\", rest are 100%\nwater_comp <- target_comp %>% filter(mukey %in% water_mukeys)\n\n# how many components?\nnrow(target_comp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 31065\n```\n:::\n\n```{.r .cell-code}\n# how many major components? (defined by \"majcompflag\")\ntarget_comp %>% \n  filter(majcompflag == \"Yes\") %>% \n  nrow() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10588\n```\n:::\n:::\n\n\n\nFor our unique MUKEYs, how many components in each?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how many components per mukey? \ncomp_nest <- target_comp %>%\n  dplyr::group_by(mukey) %>% \n  nest()\n\ncomp_nest_n <- comp_nest %>% \n  dplyr::mutate(n_comp = map_dbl(data, nrow))\n\ncomp_nest_n %>% \n  dplyr::group_by(n_comp) %>% \n  count(name = \"n_mapunits\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 x 2\n# Groups:   n_comp [9]\n  n_comp n_mapunits\n   <dbl>      <int>\n1      1        624\n2      2        793\n3      3       1622\n4      4       2056\n5      5       1444\n6      6        864\n7      7        331\n8      8        108\n9      9         20\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# just the major components from target MUs\nmaj_comp <- target_comp %>% \n  filter(majcompflag == \"Yes\")\n\nnrow(maj_comp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10588\n```\n:::\n:::\n\n\n\n## Taxonomy Summaries\n\n### Order\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntarget_comp %>% \n  dplyr::group_by(taxorder) %>% \n  dplyr::summarise(n = n()) %>% \n  arrange(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 x 2\n  taxorder        n\n  <chr>       <int>\n1 Spodosols       1\n2 Vertisols     467\n3 Inceptisols   945\n4 Histosols    1198\n5 Entisols     1812\n6 Alfisols     3026\n7 <NA>         6330\n8 Mollisols   17286\n```\n:::\n\n```{.r .cell-code}\n# what's up with taxonomic order = NA?\n# not really farmable stuff.\nmaj_comp %>% \n  filter(is.na(taxorder)) %>% \n  pull(compname) %>% \n  unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Water\"                  \"Pits\"                   \"Dumps\"                 \n [4] \"Urban land\"             \"Riverwash\"              \"Highway\"               \n [7] \"Pits, gravel\"           \"Rock outcrop\"           \"Beaches\"               \n[10] \"Pits, limestone quarry\" \"Dune land\"              \"Terrace escarpments\"   \n[13] \"Alluvial\"              \n```\n:::\n:::\n\n\n\n### Suborder\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuborders <- target_comp %>% \n  dplyr::group_by(taxsuborder) %>% \n  dplyr::summarise(n = n()) \n\n  \nsuborders %>% \n  ggplot() +\n  geom_col(aes(y = reorder(taxsuborder, -n), x = n)) +\n  ylab(\"Suborder\") + \n  xlab(\"Count\") + \n  theme_bw() +\n  ggtitle(\"Number of components by suborder\")\n```\n\n::: {.cell-output-display}\n![](03-mus_comp_in_aoi_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# what's up with taxonomic suborder = NA?\n# much of this likely dropped if we use CDL to subset \ncomps_no_taxsuborder <- target_comp %>% \n  filter(is.na(taxsuborder)) %>% \n  pull(compname) %>% \n  unique()\n\nlength(comps_no_taxsuborder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 829\n```\n:::\n\n```{.r .cell-code}\nhead(comps_no_taxsuborder, n = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Water\"                                  \n [2] \"Pits\"                                   \n [3] \"Dumps\"                                  \n [4] \"Cormant\"                                \n [5] \"Urban land\"                             \n [6] \"Mavie\"                                  \n [7] \"Kratka\"                                 \n [8] \"Radium\"                                 \n [9] \"Sahkahtay\"                              \n[10] \"Deerwood\"                               \n[11] \"Flaming\"                                \n[12] \"Northwood\"                              \n[13] \"Rosewood\"                               \n[14] \"Roliss\"                                 \n[15] \"Hamre\"                                  \n[16] \"Percy\"                                  \n[17] \"Berner\"                                 \n[18] \"Soils that have a mineral surface layer\"\n[19] \"Strathcona\"                             \n[20] \"Huot\"                                   \n```\n:::\n\n```{.r .cell-code}\ntail(comps_no_taxsuborder, n = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Sawmill\"                             \n [2] \"Marshan\"                             \n [3] \"Tripoli\"                             \n [4] \"Poorly drained sandy alluvial soils\" \n [5] \"Poorly and very poorly drained soils\"\n [6] \"Newalbin\"                            \n [7] \"Clrippin\"                            \n [8] \"Collinwood\"                          \n [9] \"Lakefield\"                           \n[10] \"Ocheyedan\"                           \n[11] \"Fostoria\"                            \n[12] \"Crippen\"                             \n[13] \"Farrer\"                              \n[14] \"Ocheydan\"                            \n[15] \"Grogan\"                              \n[16] \"Farrar\"                              \n[17] \"PD sandy soils\"                      \n[18] \"Moundprairie\"                        \n[19] \"PD soils\"                            \n[20] \"Walford Variant\"                     \n```\n:::\n:::\n\n\n\n### Subgroup & Family (long name)\n\nThe `taxclname` is a concatenation of the taxonomy subgroup and family.\nOn 11 August, 2022 Nic and I talked about how this could be another way to pull out mineralogy information.\nCould grab \"smectitic\" or \"mixed\" from these names if we wanted to do yes/no variable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntarget_comp %>% \n  pull(taxclname) %>% \n  unique() %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sandy over clayey, mixed over smectitic, frigid Typic Calciaquolls\"\n[2] \"Sandy over clayey, mixed over smectitic, frigid Aquic Calciudolls\" \n[3] \"Mixed, frigid Aquic Udipsamments\"                                  \n[4] \"Fine, smectitic, frigid Typic Epiaquerts\"                          \n[5] \"Sandy, mixed, frigid Typic Endoaquolls\"                            \n[6] \"Sandy, mixed, frigid Aeric Calciaquolls\"                           \n```\n:::\n:::\n\n\n\n## Variables of Interest\n\nI think my next step is to use the `chorizon` table and pull the variables I'm interested in for each of my major components.\nDevine et al. 2021 did 0-30cm depth-weighted averages.\nI am going to do 0-20cm because I believe this is more likely to be the available depth in our validation datasets (esp. CIG).\n\nThen I can [turn my horizon table into an SPC object](http://ncss-tech.github.io/AQP/demos/profileApply/loafercreek.html#26_build-your-own_spcs), with cokey as \"site\"?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchorizon <- mn_components <- sf::st_read(dsn = mn_gdb, layer = \"chorizon\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `chorizon' from data source \n  `C:\\Users\\Hava\\Documents\\R\\ch03-sh-cluster\\data\\gSSURGO_MN\\gSSURGO_MN.gdb' \n  using driver `OpenFileGDB'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: no simple feature geometries present: returning a data.frame or tbl_df\n```\n:::\n\n```{.r .cell-code}\ntarget_horiz <- chorizon %>% \n  filter(cokey %in% maj_comp$cokey)\n```\n:::\n\n\n\n## Diagnostic Features {#sec-diag-feat}\n\nHere, I'm pulling out the depth to restrictive horizon (if any) in the profile.\nNote that this may be \\>20cm, for our other features we are summarizing soil properties in the 0-20cm depth range.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read only diag features table, as dataframe\ndiag <- sf::st_read(dsn = mn_gdb, layer = \"codiagfeatures\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `codiagfeatures' from data source \n  `C:\\Users\\Hava\\Documents\\R\\ch03-sh-cluster\\data\\gSSURGO_MN\\gSSURGO_MN.gdb' \n  using driver `OpenFileGDB'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: no simple feature geometries present: returning a data.frame or tbl_df\n```\n:::\n\n```{.r .cell-code}\n# check out what kind of diagnostic features we have\nunique(diag$featkind) %>% head(20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Histic epipedon\"                         \n [2] \"Ochric epipedon\"                         \n [3] \"Albic materials\"                         \n [4] \"Albic horizon\"                           \n [5] \"Argillic horizon\"                        \n [6] \"Aquic conditions\"                        \n [7] \"Lamellae\"                                \n [8] \"Sapric soil materials\"                   \n [9] \"Hemic soil materials\"                    \n[10] \"Fibric soil materials\"                   \n[11] \"Cambic horizon\"                          \n[12] \"Mollic epipedon\"                         \n[13] \"Calcic horizon\"                          \n[14] \"Abrupt textural change\"                  \n[15] \"Slickensides\"                            \n[16] \"Strongly contrasting particle size class\"\n[17] \"Lithologic discontinuity\"                \n[18] NA                                        \n[19] \"Lithic contact\"                          \n[20] \"Spodic horizon\"                          \n```\n:::\n\n```{.r .cell-code}\ntarget_diag <- diag %>% \n  filter(cokey %in% maj_comp$cokey)\n```\n:::\n\n\n\nOk, so from above we can see that 10458 cokeys out of a total of 10588 have something entered in the `featkind` field as a diagnostic feature.\nNow let's investigate how many of those might be considered restrictive to roots (relevant in agricultural context):\n\ntarget_restr\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntarget_restr <- target_diag %>% \n  filter(featkind %in% c(\"Lithic contact\", \n                         \"Densic contact\",\n                         \"Paralithic contact\"))\n\n# how many cokeys have a restrictive horizon? \nlength(unique(target_restr$cokey))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 69\n```\n:::\n\n```{.r .cell-code}\ntarget_restr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             featkind featdept_l featdept_r featdept_h featdepb_l featdepb_r\n1      Densic contact         70        147        193        100        200\n2      Densic contact         50        102        163        200        200\n3      Densic contact         71        116        122         71        116\n4      Densic contact         71        116        122         71        116\n5      Densic contact         71        116        122         71        116\n6      Densic contact         71        116        122         71        116\n7      Densic contact         71        116        122         71        116\n8      Densic contact         71        116        122         71        116\n9      Densic contact         50        102        163        200        200\n10     Densic contact         70        147        193        100        200\n11     Densic contact         71        116        122         71        116\n12     Densic contact         71        116        122         71        116\n13     Densic contact         71        116        122         71        116\n14     Densic contact         71        116        122         71        116\n15     Densic contact         71        116        122         71        116\n16     Densic contact         71        116        122         71        116\n17     Densic contact         50        102        163        200        200\n18     Densic contact         70        147        193        100        200\n19     Densic contact         71        116        122         71        116\n20     Densic contact         71        116        122         71        116\n21     Densic contact         71        116        122         71        116\n22     Densic contact         71        116        122         71        116\n23     Densic contact         71        116        122         71        116\n24     Densic contact         71        116        122         71        116\n25     Densic contact         70        147        193        100        200\n26     Densic contact         50        102        163        200        200\n27     Densic contact         50        104        150        200        200\n28     Densic contact        100        104        150        200        200\n29     Densic contact         50        104        150        200        200\n30     Densic contact         50        104        150        200        200\n31     Densic contact         50        104        150        200        200\n32     Densic contact        100        109        200        200        200\n33     Densic contact         50        104        150        200        200\n34     Densic contact        100        109        200        200        200\n35     Densic contact        100        107        150        200        200\n36     Densic contact        100        104        150        200        200\n37     Densic contact         50        104        150        200        200\n38     Densic contact         34         99        160        200        200\n39     Densic contact         71        116        122         71        116\n40     Densic contact         71        116        122         71        116\n41     Densic contact         71        116        122         71        116\n42     Densic contact         71        116        122         71        116\n43     Densic contact         71        116        122         71        116\n44     Densic contact         71        116        122         71        116\n45     Densic contact         50        102        163        200        200\n46     Densic contact         70        147        193        100        200\n47     Densic contact         71        116        122         71        116\n48     Densic contact         71        116        122         71        116\n49     Densic contact         71        116        122         71        116\n50     Densic contact         71        116        122         71        116\n51     Densic contact         71        116        122         71        116\n52     Densic contact         71        116        122         71        116\n53     Densic contact         70        147        193        100        200\n54     Densic contact         50        102        163        200        200\n55     Densic contact        100        115        150        100        115\n56 Paralithic contact        100        107        149        200        200\n57 Paralithic contact        100        107        149        200        200\n58 Paralithic contact        100        107        149        200        200\n59 Paralithic contact         51         99        102         51         99\n60 Paralithic contact         51         99        102         51         99\n61 Paralithic contact         51         99        102         51         99\n62 Paralithic contact        100        107        149        200        200\n63 Paralithic contact        100        107        149        200        200\n64 Paralithic contact        100        107        149        200        200\n65 Paralithic contact         51         99        102         51         99\n66 Paralithic contact        100        107        149        200        200\n67 Paralithic contact        100        107        149        200        200\n68 Paralithic contact        100        107        149        200        200\n69 Paralithic contact        100        107        149        200        200\n   featdepb_h featthick_l featthick_r featthick_h    cokey codiagfeatkey\n1         200          NA          NA          NA 21726416      12085252\n2         200          NA          98          NA 21726420      12085267\n3         122          NA           0          NA 21743069      12097498\n4         122          NA           0          NA 21743070      12097504\n5         122          NA           0          NA 21743074      12097510\n6         122          NA           0          NA 21743078      12097516\n7         122          NA           0          NA 21743080      12097522\n8         122          NA           0          NA 21743085      12097528\n9         200          NA          98          NA 21743097      12097546\n10        200          NA          NA          NA 21743102      12097541\n11        122          NA           0          NA 21695278      12016634\n12        122          NA           0          NA 21695279      12016640\n13        122          NA           0          NA 21695286      12016652\n14        122          NA           0          NA 21695288      12016658\n15        122          NA           0          NA 21695289      12016664\n16        122          NA           0          NA 21695292      12016670\n17        200          NA          98          NA 21695798      12016702\n18        200          NA          NA          NA 21695802      12016713\n19        122          NA           0          NA 21791312      12128165\n20        122          NA           0          NA 21791314      12128159\n21        122          NA           0          NA 21791320      12128177\n22        122          NA           0          NA 21791322      12128171\n23        122          NA           0          NA 21791323      12128183\n24        122          NA           0          NA 21791326      12128189\n25        200          NA          NA          NA 21791340      12128202\n26        200          NA          98          NA 21791343      12128207\n27        200          50          96         150 21733956      12090208\n28        200          NA          96          NA 21734010      12090861\n29        200          50          96         150 21734112      12090388\n30        200          50          96         150 21734114      12090384\n31        200          50          96         150 21734115      12090396\n32        200          50          91         100 21734116      12090400\n33        200          50          96         150 21734119      12090416\n34        200          50          91         100 21734120      12090412\n35        200          NA          93          NA 21734131      12090439\n36        200          NA          96          NA 21734137      12090451\n37        200          50          96         150 21734141      12090469\n38        200          NA         101          NA 21734142      12090484\n39        122          NA           0          NA 21774009      12117800\n40        122          NA           0          NA 21774010      12117806\n41        122          NA           0          NA 21774015      12117815\n42        122          NA           0          NA 21774016      12117821\n43        122          NA           0          NA 21774017      12117827\n44        122          NA           0          NA 21774020      12117833\n45        200          NA          98          NA 21774070      12117894\n46        200          NA          NA          NA 21774075      12117905\n47        122          NA           0          NA 21789937      12126931\n48        122          NA           0          NA 21789938      12126937\n49        122          NA           0          NA 21789940      12126949\n50        122          NA           0          NA 21789945      12126943\n51        122          NA           0          NA 21789946      12126955\n52        122          NA           0          NA 21789950      12126961\n53        200          NA          NA          NA 21789965      12126974\n54        200          NA          98          NA 21789969      12126979\n55        150           0           0           0 21778778      12121251\n56        200          51          93         100 21735582      12093245\n57        200          51          93         100 21737725      12094841\n58        200          51          93         100 21737731      12094818\n59        102           0           0           0 21791113      12127946\n60        102           0           0           0 21791174      12127949\n61        102           0           0           0 21791177      12127952\n62        200          51          93         100 21791182      12128001\n63        200          51          93         100 21791185      12127989\n64        200          51          93         100 21772951      12117588\n65        102           0           0           0 21793214      12130036\n66        200          51          93         100 21793217      12130037\n67        200          51          93         100 21736557      12094207\n68        200          51          93         100 21736560      12094184\n69        200          51          93         100 21740126      12096616\n```\n:::\n\n```{.r .cell-code}\n# save this in case we want to investigate further\n#it's such a small number, seems unlikely \nwrite_csv(target_restr, \"./data/restr_horiz_data_cokey.csv\")\n```\n:::\n",
    "supporting": [
      "03-mus_comp_in_aoi_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}